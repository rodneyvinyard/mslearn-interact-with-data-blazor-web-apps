@page "/checkout"
@using BlazingPizza.Services
@using BlazingPizza.Data;
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model=Order.DeliveryAddress OnValidSubmit=PlaceOrder>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (_isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" disabled=@_isSubmitting>
            Place order
        </button>
        <ValidationSummary />
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool _isSubmitting;
    bool _isError = false;
    private async Task CheckSubmission(EditContext editContext)
    {
        _isSubmitting = true;
        var model = editContext.Model as Address;
        _isError = string.IsNullOrWhiteSpace(model?.Name)
        || string.IsNullOrWhiteSpace(model?.Line1)
        || string.IsNullOrWhiteSpace(model?.PostalCode);
        if (!_isError)
        {
            await PlaceOrder();
        }
        _isSubmitting = false;
    }
    async Task PlaceOrder()
    {
        //_isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        //NavigationManager.NavigateTo("/myorders");
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}